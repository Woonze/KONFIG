# Практическая №4.

# Задание 1

```
import dis

def foo(x):
    while x:
        x -= 1
    return x + 1

print(dis.dis(foo))
```


# Задание 2

```
LOAD_FAST 0 (x):
Команда LOAD_FAST загружает локальную переменную x в стек. В данном случае, индекс переменной 0 соответствует переменной x.

LOAD_CONST 1 (10):
Команда LOAD_CONST загружает константу 10 в стек.

BINARY_MULTIPLY:
Команда BINARY_MULTIPLY умножает два верхних значения на стеке и помещает результат обратно на стек. Операции выполняются над переменными x и 10, которые были ранее загружены.

LOAD_CONST 2 (42):
Команда LOAD_CONST загружает константу 42 в стек.

BINARY_ADD:
Команда BINARY_ADD складывает два верхних значения на стеке и помещает результат обратно на стек. Операции выполняются над результатом умножения и константой 42.

RETURN_VALUE:
Команда RETURN_VALUE возвращает верхнее значение из стека в качестве результата выполнения функции.

Итог
result = (x * 10) + 42
return result

```

# Задание 3 

```
LOAD_CONST 1 (1) Загружает константу 1 в стек. Это начальное значение для переменной r.

STORE_FAST 1 (r) Сохраняет значение 1 из стека в локальную переменную r.

LOAD_FAST 0 (n) Загружает значение переменной n в стек.

LOAD_CONST 1 (1) Загружает константу 1 в стек.

COMPARE_OP 4 (>) Сравнивает n и 1 на предмет того, больше ли n единицы.

POP_JUMP_IF_FALSE 30 Если результат сравнения n > 1 — False, то переход к строке 30 (к завершению функции). Иначе выполняется тело цикла.

Тело цикла (строки 12–28): LOAD_FAST 1 (r) Загружает значение r в стек.

LOAD_FAST 0 (n) Загружает значение n в стек.

INPLACE_MULTIPLY Умножает r на n и сохраняет результат в r.

STORE_FAST 1 (r) Обновляет значение переменной r на r * n.

LOAD_FAST 0 (n) Загружает значение n в стек.

LOAD_CONST 1 (1) Загружает константу 1 в стек.

INPLACE_SUBTRACT Уменьшает n на 1.

STORE_FAST 0 (n) Обновляет значение n на n - 1.

JUMP_ABSOLUTE 4 Переходит обратно к началу цикла (в строку 4), чтобы снова проверить условие n > 1.

Завершение функции: LOAD_FAST 1 (r) Загружает значение r в стек (это результат вычисления факториала).

RETURN_VALUE Возвращает значение r как результат выполнения функции.


def factorial(n):
    r = 1
    while n > 1:
        r *= n
        n -= 1
    return r
```


# Задание 4

```
import dis

def foo(n):
    r = 1
    while n > 1:
        r *= n
        n -= 1
    return r

print(dis.dis(foo))
```

#Задание 5

``` python
def asm(code):
  bc = []
  for op, *args in code:
    if op == 'move':
      b, c = args
      bits = 0
      bits |= 40
      bits |= (b << 8)
      bits |= (c << 15)
      bc += bits.to_bytes(3, 'little')
    if op == 'read':
      b, c = args
      bits = 0
      bits |= 216
      bits |= (b << 8)
      bits |= (c << 23)
      bc += bits.to_bytes(4, 'little')
  return bc

print(list(map(hex, asm([
  ('move', 76, 44),
  ('read', 110, 34),
]))))
```
